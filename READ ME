READ ME

This is a summary of the task carried out by each of the scripts in Scripts:

MantaSensors.py: Main file communicating with V-Rep, in order to interact with a Manta vehicle in a sinusoidal circuit as generated by csvmap.py in scene SinusoidalCircuit.ttt.
For now, it has the following functions, which it executes for every 10000 loops of the main while loop:
	-Controls vehicle motion with function Drive from BasicDriving.py
	-Simulates compass measures by extracting the heading from V-Rep and adding sensor noise
	-Extracts how much the vehicle has moved in the time step (u_t) directly by requesting the true vehicle position from V-Rep. In the future to be done by the controller
	-Requests from V-Rep all 8 sensor distances. 
	-Propagates reduced map centered about the current estimated position of the vehicle
	-Executes the particle filter in Particle_Filter.py in order to estimate vehicle position. Re-initializes particle filter every 100 iterations
	-Calculates estimation error
	-Defines the next desired points based on the trajectory defined by Trajectory_Generator.py

csvmap.py: File responsible of generating both .csv files respresenting the map of the sinusoidad circuit necessary for the particle filter. One file, 3ColMap.csv corresponds to the data that the particle filter employs directly, where as the other file, CSVmap.csv is used to generate a heightfield in V-Rep. Note that to reduce the computational effort of the particle filter, 3ColMap.csv has to be generated with less resolution than what would be convenient for the V-Rep heightfield. Then, this script is executed first with high resolution, the heightfield is imported to V-Rep, and then it is executied with low resolution, for the execution of the particle filter.

BasicDriving.py: Script in charge of imposing vehicle steer position and motor velocity. Should be replaced by a controller in charge of deciding these two parameters based on the current posiition and the next location along the trajectory.

Particle_Filter.py: Script in charge of estimating the location of the Manta vehicle based on its sensor readings. Requires the introduction of a heading and of a reasonable value of u_t. The introduction of a reduced map through reduced_Map.py allows for its computational effort to be reduced greatly. Functions included:
	-__init__: Initializes the filter's parameters and generates particle positions and weights. Particles are placed based on locations of the map without walls, where the vehicle can actually be.
	-Sample_Motion_Model: Propagates u_t to the particle positions
	-Measurement_Model: Assigns weights to each particle based on the simulated sensor reading at their locations. It employs a reduced map as generated by reduced_Map.py centered about each particle's location.
	-readingMap: Simulates what the vehicle's sensors would read at the location and heading specified at the input.
	-calcPosition: Calculated the estimated position based on the particle weights and positions.
	-resampling: Resamples new particles based on the existing particles with highest weights.
	-runParticleFilter: Runs the goddamn thing.

testFilter.py: Script in charge of testing the filter giving a known initial position in a static situation. This script does not communicate with V-Rep, only reads the map present in 3ColMap.csv.

utMap.py: In a lousy try to determine the variation of vehicle position for every time step based on its steer position and motor speeds, this script tries to map a table of values for u_t by making the vehicle move in known steer positions and velocities. However, its results do not match the actual vehicle movement in reality. Generates a numpy array in file u_t.npz and employs the heightfield defined by Flat.csv.

reduced_Map.py: This script extracts a snippet of the whole map defined by 3ColMap.csv, including only an area of interest around the vehicle. This area is set to be k times the sensor length. This script is also in charge of propagating the vehicle's motion to this snippet, such that the region of interest moves along with the  estimated position of the vehicle. Functions included:
	-__init__: Defines the reduced map's parameters, and based on the complete Map in the input, "cuts" its values to the area of interest around the specified position
	-propagateMotion: Generally, this function propagates the variation in motion without "re-cutting" the complete Map. Instead, it takes into account how many discretized lengths the position has varied in each direction, and moves the boundaries of the reduced map accordingly. If the reduced map intersect with the boundaies of the domain, its size is reduced to exclude those points. Thus, this function "re-cuts" the map if its size is less than its maximum.

testReduceMap.py: Simple script in charge of visualizing and debugging the generation of a reduced map based on a whole map.

Trajectory_Generator.py: This trajectory generator defines a spatial function f(x,y) which is very large close to obstacles and very small close to a defined goal (xG, yG). Then, for every point (xD, yD), the function looks for the direction of maximum decrease of f(x,y), and defines a new desired point in the trajectory in that direction. Functions included:
	-__init__: Initialize trajectory planner based on input parameters.
	-attGrad: Portion of the gradient of f(x,y) attractive to the goal
	-repGrad: Portion of the gradient of f(x,y) repulsive from obstacles. These obstacles are preferably included in a reduced map, to reduce computational cost.
	-genDesired: Based on the attractive and repulsive parts of the gradient, defines a new desired point in the trajectory.
Explanation of employed parameters:
	-r: Radius of imaginary sphere enclosing the vehicle. Should be big enough to avoid collision but small enough to avoid its intersection with obstacles, at which point the planner goes berserk.
	-kdes: Defines spacing between consecutive points of the trajectory.
	-bdes: Maximum bound for kdes*grad(f(x,y)), to avoid very large spearation between trajectory points
	-katt: Defines scaling of attractive part of the function
	-batt: Since grad(f_att(x,y)) will be very small close to the obstacle, this parameter defines the minimum magnitude of this gradient.
	-krep: Defines repulsive of repulsive part of the function
	-brep: Distance at which obstacles affect the repulsive part of the function

testTrajectory.py: Script employed to visualize and debug the trajectory generator in Trajectory_Generator.py

